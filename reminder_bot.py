import logging
import json
import os

import telegram as telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
import quickstart
from dotenv import load_dotenv

# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
load_dotenv()

# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø CONVERSATIONHANDLER
CHOOSING_SPECIALIST = range(1)

# –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó .ENV
BOT_TOKEN = os.getenv('BOT_TOKEN')
SPECIALISTS_FILE = os.getenv('SPECIALISTS_FILE', 'specialists.json')
TASKS_FILE = os.getenv('TASKS_FILE', 'tasks.json')

# –ó–ê–ì–†–£–ó–ö–ê –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í –ò –ò–• –ü–†–û–ï–ö–¢–û–í
def load_specialists():
    try:
        with open(SPECIALISTS_FILE, 'r', encoding='utf-8') as file:
            specialists = json.load(file)['specialists']
        return sorted(specialists, key=lambda x: x['surname'])
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {SPECIALISTS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –≤ —Ñ–∞–π–ª–µ {SPECIALISTS_FILE}.")
        return []

# –ó–ê–ì–†–£–ó–ö–ê –ó–ê–î–ê–ß
def load_tasks():
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)['tasks']
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {TASKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –≤ —Ñ–∞–π–ª–µ {TASKS_FILE}.")
        return []

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    c.execute("DROP TABLE IF EXISTS tasks")
    c.execute("DROP TABLE IF EXISTS sent_reminders")

    c.execute('''CREATE TABLE tasks
                 (id INTEGER PRIMARY KEY, project TEXT, task TEXT, interval INTEGER, next_reminder TEXT)''')
    c.execute('''CREATE TABLE sent_reminders
                 (task_id INTEGER, sent_at TEXT, PRIMARY KEY (task_id))''')

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê
def init_tasks_for_specialist(specialist):
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    tasks = load_tasks()

    for project in specialist['projects']:
        for task in tasks:
            next_reminder = datetime.now() + timedelta(seconds=task['interval_seconds'])
            c.execute("INSERT INTO tasks (project, task, interval, next_reminder) VALUES (?, ?, ?, ?)",
                      (project, task['task'], task['interval_seconds'], next_reminder.isoformat()))

    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist['surname']}")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    specialists = load_specialists()
    keyboard = [
        [InlineKeyboardButton(spec['surname'], callback_data=f"specialist:{spec['surname']}")]
        for spec in specialists
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', reply_markup=reply_markup)
    return CHOOSING_SPECIALIST

async def specialist_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, surname = query.data.split(':')
    specialists = load_specialists()
    specialist = next((s for s in specialists if s['surname'] == surname), None)

    if specialist:
        context.user_data['surname'] = specialist['surname']
        context.user_data['projects'] = specialist['projects']

        project_list = "\n".join([f"{i + 1}. {project}" for i, project in enumerate(specialist['projects'])])
        await query.edit_message_text(f"*–í–ê–®–ò –ü–†–û–ï–ö–¢–´:*\n{project_list}", parse_mode='Markdown')

        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê
        init_tasks_for_specialist(specialist)

        # –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
        context.job_queue.run_repeating(check_reminders, interval=1, first=1,
                                        data={'projects': specialist['projects'], 'chat_id': query.message.chat_id, 'surname': specialist['surname']})

        return ConversationHandler.END
    else:
        await query.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @LEX_126.')
        return ConversationHandler.END

async def send_reminder_with_buttons(context: ContextTypes.DEFAULT_TYPE, chat_id: int, project: str, task: str, task_id: int) -> None:
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∑—è–ª(–∞) –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"work:{task_id}"),
            InlineKeyboardButton("‚è∞ –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞", callback_data=f"later:{task_id}")
        ],
        [
            InlineKeyboardButton("üìÖ –ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow:{task_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–æ–µ–∫—Ç: {project}\n*{task}*", reply_markup=reply_markup, parse_mode='Markdown')

async def check_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    now = datetime.now()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now}")
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    c.execute("""
        SELECT t.id, t.project, t.task 
        FROM tasks t
        LEFT JOIN sent_reminders sr ON t.id = sr.task_id
        WHERE t.next_reminder <= ? AND (sr.sent_at IS NULL OR sr.sent_at < t.next_reminder)
    """, (now.isoformat(),))
    tasks = c.fetchall()

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(tasks)}")

    for task_id, project, task in tasks:
        if project in context.job.data['projects']:
            try:
                await send_reminder_with_buttons(context, context.job.data['chat_id'], project, task, task_id)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {project}, –∑–∞–¥–∞—á–∞: {task}")

                c.execute("INSERT OR REPLACE INTO sent_reminders (task_id, sent_at) VALUES (?, ?)",
                          (task_id, now.isoformat()))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    conn.commit()
    conn.close()

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data.startswith("specialist:"):
        return await specialist_choice(update, context)

    action, task_id = query.data.split(':')
    task_id = int(task_id)

    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    if action == "work":
        c.execute("SELECT interval, project, task FROM tasks WHERE id = ?", (task_id,))
        interval, project, task = c.fetchone()
        next_reminder = datetime.now() + timedelta(seconds=interval)
        c.execute("UPDATE tasks SET next_reminder = ? WHERE id = ?", (next_reminder.isoformat(), task_id))
        c.execute("DELETE FROM sent_reminders WHERE task_id = ?", (task_id,))
        await query.edit_message_text(text=f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É.")

        # –ó–ê–ü–ò–°–¨ –í GOOGLE SHEETS
        try:
            surname = context.user_data.get('surname', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            result = quickstart.write_to_sheet([[surname, project, task, datetime.now().strftime('%d.%m')]])
            if isinstance(result, dict) and result.get('updates'):
                logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google Sheets: {surname}, {project}, {task}")
            else:
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {result}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            logger.exception("–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏:")

    elif action == "later":
        next_reminder = datetime.now() + timedelta(hours=2)
        c.execute("UPDATE tasks SET next_reminder = ? WHERE id = ?", (next_reminder.isoformat(), task_id))
        c.execute("DELETE FROM sent_reminders WHERE task_id = ?", (task_id,))
        await query.edit_message_text(text=f"‚è≥ –•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞.")
    elif action == "tomorrow":
        next_reminder = datetime.now() + timedelta(days=1)
        c.execute("UPDATE tasks SET next_reminder = ? WHERE id = ?", (next_reminder.isoformat(), task_id))
        c.execute("DELETE FROM sent_reminders WHERE task_id = ?", (task_id,))
        await query.edit_message_text(text=f"üìÖ –ü–æ–Ω—è–ª, –Ω–∞–ø–æ–º–Ω—é –≤–∞–º –æ–± —ç—Ç–æ–π –∑–∞–¥–∞—á–µ –∑–∞–≤—Ç—Ä–∞.")

    conn.commit()
    conn.close()

def main() -> None:
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_SPECIALIST: [CallbackQueryHandler(specialist_choice, pattern=r'^specialist:')],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(button_callback))

    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    if os.environ.get('ENVIRONMENT') == 'PRODUCTION':
        port = int(os.environ.get('PORT', 10000))
        application.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=os.environ.get("WEBHOOK_URL"),
            secret_token=os.environ.get("SECRET_TOKEN")
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()