import logging
import json
import os
import telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, CallbackQueryHandler
import sqlite3
from datetime import datetime, timedelta
from dotenv import load_dotenv
import warnings

warnings.filterwarnings("ignore", category=telegram.warnings.PTBUserWarning)

# –ó–ê–ì–†–£–ó–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
load_dotenv()

# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø CONVERSATIONHANDLER
CHOOSING_SPECIALIST = range(1)

# –ü–û–õ–£–ß–ï–ù–ò–ï –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ò–ó .ENV
BOT_TOKEN = os.getenv('BOT_TOKEN')
SPECIALISTS_FILE = os.getenv('SPECIALISTS_FILE', 'specialists.json')
TASKS_FILE = os.getenv('TASKS_FILE', 'tasks.json')

# –ó–ê–ì–†–£–ó–ö–ê –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í –ò –ò–• –ü–†–û–ï–ö–¢–û–í
def load_specialists():
    try:
        with open(SPECIALISTS_FILE, 'r', encoding='utf-8') as file:
            specialists = json.load(file)['specialists']
        return sorted(specialists, key=lambda x: x['surname'])
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {SPECIALISTS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –≤ —Ñ–∞–π–ª–µ {SPECIALISTS_FILE}.")
        return []

# –ó–ê–ì–†–£–ó–ö–ê –ó–ê–î–ê–ß
def load_tasks():
    try:
        with open(TASKS_FILE, 'r', encoding='utf-8') as file:
            return json.load(file)['tasks']
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {TASKS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return []
    except json.JSONDecodeError:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –≤ —Ñ–∞–π–ª–µ {TASKS_FILE}.")
        return []

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–•
def init_db():
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    c.execute("DROP TABLE IF EXISTS tasks")
    c.execute("DROP TABLE IF EXISTS sent_reminders")

    c.execute('''CREATE TABLE tasks
                 (id INTEGER PRIMARY KEY, project TEXT, task TEXT, interval INTEGER, next_reminder TEXT)''')
    c.execute('''CREATE TABLE sent_reminders
                 (task_id INTEGER PRIMARY KEY, sent_at TEXT, responded BOOLEAN)''')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    c.execute("CREATE INDEX idx_tasks_next_reminder ON tasks(next_reminder)")
    c.execute("CREATE INDEX idx_sent_reminders_task_id ON sent_reminders(task_id)")

    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê
def init_tasks_for_specialist(specialist):
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    tasks = load_tasks()

    for project in specialist['projects']:
        for task in tasks:
            next_reminder = datetime.now() + timedelta(seconds=task['interval_seconds'])
            c.execute("INSERT INTO tasks (project, task, interval, next_reminder) VALUES (?, ?, ?, ?)",
                      (project, task['task'], task['interval_seconds'], next_reminder.isoformat()))

    conn.commit()
    conn.close()
    logger.info(f"–ó–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist['surname']}")

# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! üòä\n–¢–µ–±–µ –Ω–∞ –ø–æ–º–æ—â—å —Å–ø–µ—à–∏—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä—É—Ç–∏–Ω—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, "
        "–±–µ–∑ –∫–æ—Ç–æ—Ä–æ–π –Ω–∏–∫–∞–∫. üí™‚ú®\n\n–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–µ—Ä–∏–æ–¥–æ–º –ø—Ä–∏–ª–æ–∂—É –ø–æ–∑–∂–µ. üóìÔ∏è –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å, –¥–∞–π –∑–Ω–∞—Ç—å! üåü"
    )
    await update.message.reply_text(welcome_message)

    specialists = load_specialists()
    keyboard = [
        [telegram.InlineKeyboardButton(spec['surname'], callback_data=f"specialist:{spec['surname']}")]
        for spec in specialists
    ]
    reply_markup = telegram.InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:', reply_markup=reply_markup)
    return CHOOSING_SPECIALIST

async def specialist_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    _, surname = query.data.split(':')
    specialists = load_specialists()
    specialist = next((s for s in specialists if s['surname'] == surname), None)

    if specialist:
        context.user_data['surname'] = specialist['surname']
        context.user_data['projects'] = specialist['projects']

        project_list = "\n".join([f"{i + 1}. {project}" for i, project in enumerate(specialist['projects'])])
        await query.edit_message_text(f"*–í–ê–®–ò –ü–†–û–ï–ö–¢–´:*\n{project_list}", parse_mode='Markdown')

        # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß –î–õ–Ø –í–´–ë–†–ê–ù–ù–û–ì–û –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê
        init_tasks_for_specialist(specialist)

        # –ó–ê–ü–£–°–ö –ü–†–û–í–ï–†–ö–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô
        context.job_queue.run_repeating(check_reminders, interval=5, first=1,
                                        data={'projects': specialist['projects'], 'chat_id': query.message.chat_id,
                                              'surname': specialist['surname']})

        return ConversationHandler.END
    else:
        await query.edit_message_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ @LEX_126.')
        return ConversationHandler.END

async def send_reminder(context: ContextTypes.DEFAULT_TYPE, chat_id: int, task: str, projects: list) -> None:
    message = f"*üìã –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï:*\n\n*{task.upper()}*\n"
    for project in sorted(projects):
        message += f"- {project}\n"

    await context.bot.send_message(chat_id=chat_id, text=message, parse_mode='Markdown')

async def check_reminders(context: ContextTypes.DEFAULT_TYPE) -> None:
    now = datetime.now()
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {now}")
    conn = sqlite3.connect('tasks.db')
    c = conn.cursor()

    projects = context.job.data['projects']
    placeholders = ','.join('?' for _ in projects)

    c.execute(f"""
        SELECT t.id, t.project, t.task, t.interval
        FROM tasks t
        WHERE t.next_reminder <= ? AND t.project IN ({placeholders})
    """, (now.isoformat(), *projects))

    tasks = c.fetchall()

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {len(tasks)}")

    reminders = {}
    for task_id, project, task, interval in tasks:
        if task not in reminders:
            reminders[task] = {"projects": set(), "interval": interval}
        reminders[task]["projects"].add(project)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
        next_reminder = now + timedelta(seconds=interval)
        c.execute("UPDATE tasks SET next_reminder = ? WHERE id = ?", (next_reminder.isoformat(), task_id))

    for task, data in reminders.items():
        await send_reminder(context, context.job.data['chat_id'], task, list(data["projects"]))

    conn.commit()
    conn.close()

def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Exception while handling an update: {context.error}")
    if isinstance(context.error, telegram.error.BadRequest) and "Query is too old" in str(context.error):
        if update and update.callback_query:
            update.callback_query.answer()
            update.effective_message.reply_text("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
    elif update:
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

def main() -> None:
    init_db()

    application = Application.builder().token(BOT_TOKEN).build()

    # –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING_SPECIALIST: [CallbackQueryHandler(specialist_choice, pattern=r'^specialist:')],
        },
        fallbacks=[],
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    application.run_polling()

if __name__ == '__main__':
    main()